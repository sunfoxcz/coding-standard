imports:
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/psr2.yaml' }
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/php71.yaml' }
    - { resource: '%vendor_dir%/nette/coding-standard/coding-standard-php71.yml' }

parameters:
    indentation: spaces
    exclude_checkers:
    skip:
        Nette\CodingStandard\Fixer\ClassNotation\LastPropertyAndFirstMethodSeparationFixer: ~
        Nette\CodingStandard\Sniffs\WhiteSpace\FunctionSpacingSniff: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\LowerCaseConstantSniff.Found: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\DisallowSpaceIndentSniff: ~
        PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\ControlStructureSpacingSniff.SpacingAfterOpenBrace: ~
        PHP_CodeSniffer\Standards\PSR2\Sniffs\Methods\FunctionCallSignatureSniff.MultipleArguments: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.SpacingAfterOpenBrace: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.SpacingBeforeClose: ~
        PhpCsFixer\Fixer\Casing\LowercaseConstantsFixer: ~
        PhpCsFixer\Fixer\PhpTag\LinebreakAfterOpeningTagFixer: ~
        SlevomatCodingStandard\Sniffs\Commenting\RequireOneLinePropertyDocCommentSniff: ~

services:
    # ensure declare(strict_types=1); is on the same line as <?php
    Sunfox\CodingStandard\Fixer\Strict\StrictTypesOnSameLineAsOpeningTagFixer: ~
    # empty line after declare(strict_types=1);
    Symplify\CodingStandard\Fixer\Strict\BlankLineAfterStrictTypesFixer: ~
    # require must use absolute path
    Symplify\CodingStandard\Fixer\ControlStructure\RequireFollowedByAbsolutePathFixer: ~
    # The PHP constants `TRUE`, `FALSE`, and `NULL` MUST be in upper case.
    Sunfox\CodingStandard\Fixer\Casing\UppercaseConstantsFixer: ~
    # Classes implementing an interface MUST be final.
    Symplify\CodingStandard\Fixer\Solid\FinalInterfaceFixer: ~
    # There MUST NOT be more than one constant or property declared per statement.
    PhpCsFixer\Fixer\ClassNotation\SingleClassElementPerStatementFixer:
        elements:
            - const
            - property
    # final classes MUST NOT have protected properties
    PhpCsFixer\Fixer\ClassNotation\ProtectedToPrivateFixer: ~
    # set array property default value
    Symplify\CodingStandard\Fixer\Property\ArrayPropertyDefaultValueFixer: ~
    # Last property and 1st method should be separated by 1 space
    PhpCsFixer\Fixer\ClassNotation\ClassAttributesSeparationFixer:
        elements:
            - method
            - property
    # Line length
    Symplify\CodingStandard\Fixer\LineLength\LineLengthFixer:
        line_length: 120
        break_long_lines: true
        inline_short_lines: true
    # The uppercase MUST be used for PHP constants in phpdoc.
    Sunfox\CodingStandard\Fixer\Phpdoc\PhpdocConstantFixer: ~
    # Import namespaces
    SlevomatCodingStandard\Sniffs\Namespaces\ReferenceUsedNamesOnlySniff:
        allowFullyQualifiedGlobalClasses: true
    # Looks for unused imports from other namespaces.
    SlevomatCodingStandard\Sniffs\Namespaces\UnusedUsesSniff:
        searchAnnotations: true
    # remove useless doc block comments
    Symplify\CodingStandard\Fixer\Commenting\RemoveUselessDocBlockFixer: ~
    Symplify\CodingStandard\Fixer\Commenting\RemoveSuperfluousDocBlockWhitespaceFixer: ~
    Symplify\CodingStandard\Fixer\Commenting\RemoveEmptyDocBlockFixer: ~
    # detect dead code
    SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff: ~
    # drop dead use namespaces
    PhpCsFixer\Fixer\Import\NoUnusedImportsFixer: ~
    # drop unused public methods
    #Symplify\CodingStandard\Sniffs\DeadCode\UnusedPublicMethodSniff: ~
    # Debug
    Symplify\CodingStandard\Sniffs\Debug\DebugFunctionCallSniff: ~
